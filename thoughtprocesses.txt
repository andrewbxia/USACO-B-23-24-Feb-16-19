pov using discord messages as problem finishing timestamps :skull:


1. Palindrome Game
TEST CASES:
* 1. 3.3mb2ms * 2. 3.3mb2ms * 3. 3.3mb2ms * 4. 3.3mb2ms * 5. 3.3mb2ms * 6. 3.3mb2ms * 7. 3.3mb2ms * 8. 3.3mb1ms * 9. 3.3mb1ms * 10. 3.3mb2ms * 11. 3.5mb16ms * 12. 3.5mb16ms * 13. 3.5mb16ms

(all caps warning for....reasons)
I HATED THIS PROBLEM I SPENT LIKE AN HOUR TRYING OUT DIFFERENT ARBITRARY SOLUTIONS LIKE CHECKING FOR DIVISIBILITY BY 11, FINDING THE SMALLEST PALINDROME GREATER AND SMALLER THAN THE NUMBER OF STONES GIVEN AUGHGHHHH
So, I skipped this problem, completely drained of motivation, but pushed on.
I timed myself to give myself one hour on the first two problems, and then two hours on the harder third problem, so you can probably see how bad I felt with only three hours left on the timer and completely red incorrect test cases.


2. Milk Exchange
TEST CASES:
* 1. 3.4mb2ms * 2. 3.4mb2ms * 3. 3.4mb2ms * 4. 3.4mb2ms * 5. 3.4mb2ms * 6. 3.4mb2ms * 7. 3.4mb2ms * 8. 3.4mb2ms * 9. 7.8mb58ms * 10. 7.8mb58ms * 11. 7.8mb68ms * 12. 7.8mb63ms * 13. 7.8mb85ms * 14. 7.8mb85ms * 15. 7.8mb72ms * 16. 7.8mb64ms

Completely demotivated, I perservered and tackled this problem which took around fourty-five minutes to solve, and wasn't too hard, just worked out some test cases on paper before finding a solution with "sharing" cows where all they do is give milk to each other(they will stay at their max volume regardless of outside cows) and tackling the flow of milk, which stemmed from cows with a net value of -1(only giving milk away without recieving any (sad) (see code) ) through the cows with a net value of zero, until the milk reached the "sharing" cows, where the flow inevitably stopped.
Now, before you go "OMGOMGOMGOMGOMGOMGOMOGMOGMMMOG A NESTED LOOP IN THE CODE THIS IS SO BAD!!!!!" I worked out that there could not be more than just a marginal percentage of cows that would have a net value of -1, so, it would not be a "true" O(N^2) solution, thus granting me 85 ms as my most time-consuming test case.
Because of this great concern over two loops, I also considered the possiblility of there being a full array of mostly scary -1s, which I immediately deduced as impossible.


3. Maximizing Productivity
TEST CASES:
* 1. 3.4mb2ms * 2. 3.4mb4ms * 3. 3.4mb4ms * 4. 3.4mb4ms * 5. 4.9mb437ms * 6. 4.9mb438ms * 7. 4.9mb437ms * 8. 4.9mb432ms * 9. 4.9mb433ms * 10. 4.9mb514ms * 11. 4.9mb514ms * 12. 4.9mb514ms * 13. 4.9mb513ms * 14. 4.9mb514ms * 15. 4.9mb513ms * 16. 4.9mb512ms * 17. 4.9mb511ms

Now motivated with a perfect problem 2, I took on the infamous third problem in USACO contests. 
While I too thought this would be the hardest problem, and it was certainly the most complicated-looking (the input literally looks blocky ;-;), it was relatively easy to crunch out an easy sorting solution (in around 10 MINUTES!!!) while using the differences between the closing times and the times Bessie chooses to come. 
We don't need to focus on those specific times, as FJ will only come a certain time AFTER t_i. 
So, we can use a difference array to keep track of only the values we care about.
Then, after we sort those times, we now have a system where from the ending index and going backwards, we have that amount of houses where you have to wake up earlier than the value at the indice, which is evaluated in O(1) time, giving us an overall time complexity of NlogN and scraping by with ~500ms time cases.
I was actually so scared for half a second seeing the first few cases get graded (USACO shows you the grading IN PROGRESS so you can see how you did WHILE its grading test cases sequentialy so I got shivers when the cases 5-12 returned times over 400 ms), but thankfully it worked out in the end!


1. Palindrome Game(After tackling problem 3)

When I came back to this problem after a successful problem 2 and 3 and two hours left on the clock, I knew I had to solve this; I was doing too well to fall at the first problem.
So, I worked on the many pages I had used to work this problem out. 
After seeing that 10 was a "kill number"(If cow C has this number at the start of their turn, then it is guaranteed that cow C loses), I worked on seeing if 20 was a kill number, and then looking at 30 as well, seeing as if you were to start from the range (n * 10 < s < (n + 1) * 10), cow C could simply subtract a single digit number(still a palindrome) and get the other cow on a kill number. 
I also saw that you probably needed a string to represent this large number (10^10^5), which would have at max 10^5 characters, as there was no possible number type that could represent that!
After 15 minutes of bashing, I saw a tiny correlation that this game might have something to do with if the number of stones ends in a zero or not.
So, as one of my many arbitrary solutions that I shoved into the servers, I submitted the solution(along with a check to see if the number was less than 10), and was amazed when tinkering away on the usaco.guide website, I saw a screen of green!
I immediately started jumping out of my seat, celebrating to my school friends(hi)!!!


In-Contest promotion to Silver (perfect scores on a division allow you to immediately take the next higher division contest):

we do not talk about that
my brain was hemmoraging trying to work out those problems oh god pls no